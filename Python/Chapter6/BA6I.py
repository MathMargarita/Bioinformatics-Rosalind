"""
A solution to a ROSALIND bioinformatics problem.
Problem Title: Implement GraphToGenome
Rosalind ID: BA6I
URL: http://rosalind.info/problems/ba6i/
"""
def CycleToChromosome(Nodes):
    Chromosome=[]
    k=int(len(Nodes)/2)
    for j in range(0,k):
        if Nodes[2*j] < Nodes[2*j+1]:
            Chromosome.append(int(Nodes[2*j+1]/2))
        else:
            Chromosome.append(int(-Nodes[2*j]/2))
    return Chromosome

def GraphToGenome(GenomeGraph):
     P=[]
     for Nodes in GenomeGraph:
          Chromosome=CycleToChromosome(Nodes)
          P.append(Chromosome)
     return P

def PairsToGraphnovi(p):
    graph = []
    start = 0
    P=p.copy()
    while len(P)>0:
        cycle=[P[start]]
        P.remove(P[start])
        while True:
            if cycle[-1][1]%2==0:
                for pair in P:
                    if cycle[-1][1]-1 in pair:
                        if cycle[-1][1]-1 == pair[0]:
                            cycle.append((pair[0],pair[1]))
                        else:
                            cycle.append((pair[1],pair[0]))
                        P.remove(pair)
                        break
            else:
                for pair in P:
                    if cycle[-1][1]+1 in pair:
                        if cycle[-1][1] + 1 == pair[0]:
                            cycle.append((pair[0], pair[1]))
                        else:
                            cycle.append((pair[1], pair[0]))
                        P.remove(pair)
                        break
            if cycle[0][0] % 2 == 0:
                if cycle[0][0] - 1 in cycle[-1]:
                    break
            else:
                if cycle[0][0] + 1 in cycle[-1]:
                    break
        Cycle=[cycle[0][1]]
        for i in range (1,len(cycle)):
            Cycle.append(cycle[i][0])
            Cycle.append(cycle[i][1])
        Cycle.append(cycle[0][0])
        graph.append(Cycle)
    return graph

def PairsToGraph(p):
    graph = []
    start = 0
    while start < len(p):
        cycle = []
        cycle.append(p[start][0])
        cycle.append(p[start][1])
        for i in range(start+1, len(p)):
            cycle.append(p[i][0])
            if p[i][1] - cycle[0] == 1 or p[i][1] - cycle[0] == -1:
                cycle.insert(0, p[i][1])
                start = i + 1
                break
            cycle.append(p[i][1])
        graph.append(cycle)
    return graph

if __name__ == '__main__':
    x = '''(2, 4), (3, 6), (5, 1), (7, 9), (10, 12), (11, 8)'''
    x = x[1:-1]
    p = x.split("), (")
    for i in range(len(p)):
        a = p[i].split(", ")
        p[i] = (int(a[0]), int(a[1]))
    graph = PairsToGraph(p)
    res = GraphToGenome(graph)
    for j in range(len(res)):
        for i in range(len(res[j])):
            if res[j][i] > 0:
                res[j][i] = "+" + str(res[j][i])
            else:
                res[j][i] = str(res[j][i])
        res[j] = " ".join(res[j])
        res[j] = "(" + res[j] + ")"
    res = "".join(res)
    print(res)
    print(res == '''(+1 -2 -3)(-4 +5 -6)''')

    x = '''(1, 4), (3, 6), (5, 7), (8, 9), (10, 11), (12, 14), (13, 15), (16, 18), (17, 19), (20, 22), (21, 24), (23, 26), (25, 27), (28, 29), (30, 32), (31, 33), (34, 36), (35, 38), (37, 39), (40, 42), (41, 44), (43, 2), (45, 48), (47, 50), (49, 51), (52, 54), (53, 56), (55, 57), (58, 60), (59, 62), (61, 63), (64, 66), (65, 68), (67, 69), (70, 72), (71, 74), (73, 76), (75, 78), (77, 79), (80, 81), (82, 84), (83, 86), (85, 87), (88, 90), (89, 91), (92, 94), (93, 46), (96, 98), (97, 99), (100, 102), (101, 103), (104, 106), (105, 107), (108, 109), (110, 111), (112, 114), (113, 115), (116, 117), (118, 119), (120, 122), (121, 123), (124, 125), (126, 127), (128, 130), (129, 131), (132, 134), (133, 135), (136, 138), (137, 139), (140, 141), (142, 144), (143, 145), (146, 147), (148, 149), (150, 152), (151, 95), (154, 155), (156, 158), (157, 159), (160, 161), (162, 163), (164, 166), (165, 168), (167, 169), (170, 171), (172, 174), (173, 175), (176, 178), (177, 180), (179, 182), (181, 184), (183, 186), (185, 187), (188, 190), (189, 191), (192, 194), (193, 196), (195, 153), (198, 200), (199, 201), (202, 204), (203, 205), (206, 207), (208, 210), (209, 211), (212, 214), (213, 215), (216, 217), (218, 219), (220, 222), (221, 223), (224, 226), (225, 227), (228, 230), (229, 232), (231, 234), (233, 235), (236, 238), (237, 239), (240, 241), (242, 244), (243, 245), (246, 197), (248, 250), (249, 252), (251, 253), (254, 255), (256, 258), (257, 260), (259, 262), (261, 263), (264, 265), (266, 267), (268, 270), (269, 272), (271, 273), (274, 276), (275, 278), (277, 280), (279, 281), (282, 283), (284, 286), (285, 247), (288, 290), (289, 292), (291, 293), (294, 295), (296, 297), (298, 299), (300, 302), (301, 303), (304, 306), (305, 307), (308, 310), (309, 312), (311, 314), (313, 316), (315, 318), (317, 319), (320, 322), (321, 323), (324, 325), (326, 327), (328, 330), (329, 332), (331, 333), (334, 336), (335, 338), (337, 339), (340, 287)'''
    x = x[1:-1]
    p = x.split("), (")
    for i in range(len(p)):
        a = p[i].split(", ")
        p[i] = (int(a[0]), int(a[1]))
    graph = PairsToGraph(p)
    res = GraphToGenome(graph)
    for j in range(len(res)):
        for i in range(len(res[j])):
            if res[j][i] > 0:
                res[j][i] = "+" + str(res[j][i])
            else:
                res[j][i] = str(res[j][i])
        res[j] = " ".join(res[j])
        res[j] = "(" + res[j] + ")"
    res = "".join(res)
    print(res)
    print(res == '''(-1 -2 -3 +4 +5 +6 -7 +8 -9 +10 -11 -12 -13 +14 +15 -16 +17 -18 -19 +20 -21 -22)(-23 -24 -25 +26 -27 -28 +29 -30 -31 +32 -33 -34 +35 -36 -37 -38 -39 +40 +41 -42 -43 +44 -45 +46 -47)(+48 -49 +50 -51 +52 -53 +54 +55 +56 -57 +58 +59 +60 -61 +62 +63 +64 -65 +66 -67 +68 -69 +70 +71 -72 +73 +74 +75 -76)(+77 +78 -79 +80 +81 +82 -83 -84 +85 +86 -87 +88 -89 -90 -91 -92 -93 +94 -95 +96 -97 -98)(+99 -100 +101 -102 +103 +104 -105 +106 -107 +108 +109 +110 -111 +112 -113 +114 -115 -116 -117 +118 -119 +120 +121 -122 +123)(+124 -125 -126 +127 +128 -129 -130 -131 +132 +133 +134 -135 -136 +137 -138 -139 -140 +141 +142 -143)(+144 -145 -146 +147 +148 +149 +150 -151 +152 -153 +154 -155 -156 -157 -158 -159 +160 -161 +162 +163 +164 -165 -166 +167 -168 -169 +170)''')

    x = '''(1, 4), (3, 5), (6, 8), (7, 10), (9, 12), (11, 14), (13, 16), (15, 17), (18, 19), (20, 22), (21, 24), (23, 25), (26, 28), (27, 29), (30, 32), (31, 34), (33, 35), (36, 37), (38, 40), (39, 41), (42, 44), (43, 45), (46, 48), (47, 49), (50, 2), (52, 53), (54, 56), (55, 57), (58, 60), (59, 62), (61, 64), (63, 66), (65, 68), (67, 70), (69, 71), (72, 73), (74, 76), (75, 77), (78, 80), (79, 82), (81, 84), (83, 85), (86, 88), (87, 89), (90, 91), (92, 93), (94, 95), (96, 97), (98, 99), (100, 102), (101, 104), (103, 51), (105, 107), (108, 109), (110, 112), (111, 114), (113, 115), (116, 118), (117, 120), (119, 121), (122, 123), (124, 125), (126, 128), (127, 130), (129, 131), (132, 133), (134, 135), (136, 137), (138, 140), (139, 142), (141, 143), (144, 146), (145, 148), (147, 149), (150, 151), (152, 154), (153, 155), (156, 158), (157, 106), (160, 162), (161, 163), (164, 165), (166, 168), (167, 170), (169, 172), (171, 174), (173, 176), (175, 177), (178, 180), (179, 182), (181, 183), (184, 185), (186, 187), (188, 189), (190, 191), (192, 193), (194, 195), (196, 198), (197, 199), (200, 202), (201, 204), (203, 205), (206, 159), (207, 210), (209, 212), (211, 214), (213, 215), (216, 217), (218, 219), (220, 221), (222, 223), (224, 225), (226, 227), (228, 229), (230, 231), (232, 234), (233, 236), (235, 238), (237, 239), (240, 241), (242, 244), (243, 245), (246, 248), (247, 249), (250, 252), (251, 253), (254, 208), (255, 258), (257, 260), (259, 262), (261, 264), (263, 265), (266, 268), (267, 270), (269, 272), (271, 273), (274, 275), (276, 278), (277, 280), (279, 282), (281, 283), (284, 286), (285, 287), (288, 289), (290, 292), (291, 294), (293, 296), (295, 297), (298, 300), (299, 301), (302, 256), (304, 305), (306, 308), (307, 310), (309, 311), (312, 313), (314, 316), (315, 317), (318, 320), (319, 321), (322, 323), (324, 326), (325, 328), (327, 329), (330, 332), (331, 333), (334, 336), (335, 337), (338, 340), (339, 341), (342, 343), (344, 346), (345, 347), (348, 350), (349, 352), (351, 353), (354, 355), (356, 358), (357, 303), (360, 361), (362, 363), (364, 366), (365, 367), (368, 370), (369, 372), (371, 374), (373, 375), (376, 377), (378, 379), (380, 381), (382, 383), (384, 385), (386, 388), (387, 389), (390, 391), (392, 394), (393, 396), (395, 398), (397, 399), (400, 359)'''
    x = x[1:-1]
    p = x.split("), (")
    for i in range(len(p)):
        a = p[i].split(", ")
        p[i] = (int(a[0]), int(a[1]))

    graph = PairsToGraph(p)
    res = GraphToGenome(graph)
    for j in range(len(res)):
        for i in range(len(res[j])):
            if res[j][i] > 0:
                res[j][i] = "+" + str(res[j][i])
            else:
                res[j][i] = str(res[j][i])
        res[j] = " ".join(res[j])
        res[j] = "(" + res[j] + ")"
    res = "".join(res)
    print(res)
