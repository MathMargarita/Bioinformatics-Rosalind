"""
A solution to a ROSALIND bioinformatics problem.
Problem Title: Find a Highest-Scoring Local Alignment of Two Strings
Rosalind ID: BA5F
URL: http://rosalind.info/problems/ba5f/
"""
def alignRecontructionMoves(backtrack):
    n = len(backtrack) - 1
    m = len(backtrack[0]) - 1
    moves = []
    while n > 0 or m > 0:
        moves.append(backtrack[n][m])
        if backtrack[n][m] == "D":
            n = n - 1
        elif backtrack[n][m] == "R":
            m = m - 1
        else:
            m = m - 1
            n = n - 1

    return moves[::-1]


def moves_to_strings_local(first_word, second_word, moves):
    pointer_w1 = 0
    pointer_w2 = 0

    w1 = []
    w2 = []

    for move in moves:
        if move == "D":
            w1.append(first_word[pointer_w1])
            pointer_w1 += 1
        if move == "R":
            w2.append(second_word[pointer_w2])
            pointer_w2 += 1
        if move == "Diag":
            w1.append(first_word[pointer_w1])
            pointer_w1 += 1
            w2.append(second_word[pointer_w2])
            pointer_w2 += 1
        if move == "Skip":
            pointer_w1 += 1
            pointer_w2 += 1



    return "".join(w1), "".join(w2)

def localalignment(first, second):
    s=[]
    for i in range (len(first)+1):
        s.append([])
    s[0].append(0)
    #first column
    for i in range(1,len(first)+1):
        s[i].append(s[i-1][0]-5)#sigma=5
    #first row
    for j in range(1,len(second)+1):
        s[0].append(s[0][j-1]-5)

    newFirst=""
    newSecond=""
    Backtrack=[]
    for i in range (len(first)+1):
        Backtrack.append([])
    Backtrack[0].append('')
    # first column
    for i in range(1, len(first) + 1):
        Backtrack[i].append("D")
    # first row
    for j in range(1, len(second) + 1):
        Backtrack[0].append("R")

    penality = getPenality()
    index = getInedexOfLetter()
    for i in range(1, len(first) + 1):
        for j in range(1, len(second) + 1):
            s[i].append(
                max(0,s[i - 1][j] - 5, s[i][j - 1] - 5, s[i - 1][j - 1] + penality[first[i - 1]][index[second[j - 1]]]))
            if s[i][j]==s[i - 1][j - 1] + penality[first[i - 1]][index[second[j - 1]]]:
                Backtrack[i].append("Diag")
            else:
                if s[i][j]==s[i-1][j]-5:
                    Backtrack[i].append("D")
                else:
                    if s[i][j]==s[i][j-1]-5:
                        Backtrack[i].append("R")
                    else:
                        Backtrack[i].append("Skip")

    newFirst,newSecond= moves_to_strings_local(first,second,alignRecontructionMoves(Backtrack))
    return globalalignment(newFirst,newSecond)


def moves_to_strings(first_word, second_word, moves):
    pointer_w1 = 0
    pointer_w2 = 0

    w1 = []
    w2 = []

    for move in moves:
        if move == "D":
            w1.append(first_word[pointer_w1])
            pointer_w1 += 1
            w2.append("-")
        if move == "R":
            w1.append("-")
            w2.append(second_word[pointer_w2])
            pointer_w2 += 1
        if move == "Diag":
            w1.append(first_word[pointer_w1])
            pointer_w1 += 1
            w2.append(second_word[pointer_w2])
            pointer_w2 += 1

    return "".join(w1), "".join(w2)

def globalalignment(first, second):
    s=[]
    for i in range (len(first)+1):
        s.append([])
    s[0].append(0)
    #first column
    for i in range(1,len(first)+1):
        s[i].append(s[i-1][0]-5)#sigma=5
    #first row
    for j in range(1,len(second)+1):
        s[0].append(s[0][j-1]-5)

    newFirst=""
    newSecond=""

    Backtrack=[]
    for i in range (len(first)+1):
        Backtrack.append([])
    Backtrack[0].append('')
    # first column
    for i in range(1, len(first) + 1):
        Backtrack[i].append("D")
    # first row
    for j in range(1, len(second) + 1):
        Backtrack[0].append("R")

    penality = getPenality()
    index = getInedexOfLetter()
    for i in range(1, len(first) + 1):
        for j in range(1, len(second) + 1):
            s[i].append(
                max(s[i - 1][j] - 5, s[i][j - 1] - 5, s[i - 1][j - 1] + penality[first[i - 1]][index[second[j - 1]]]))
            if s[i][j]==s[i - 1][j - 1] + penality[first[i - 1]][index[second[j - 1]]]:
                Backtrack[i].append("Diag")
            else:
                if s[i][j]==s[i-1][j]-5:
                    Backtrack[i].append("D")
                else:
                    if s[i][j]==s[i][j-1]-5:
                        Backtrack[i].append("R")

    newFirst,newSecond= moves_to_strings(first,second,alignRecontructionMoves(Backtrack))
    return str(s[len(first)][len(second)])+"\n"+ newFirst+"\n"+newSecond

def getPenality():
    penality={
    "A":[2, -2,  0,  0, -3,  1, -1, -1, -1, -2, -1,  0,  1,  0, -2,  1,  1,  0, -6, -3],
    "C":[-2, 12, -5, -5, -4, -3, -3, -2, -5, -6, -5, -4, -3, -5, -4,  0, -2, -2, -8,  0],
    "D":[0, -5,  4,  3, -6,  1,  1, -2,  0, -4, -3,  2, -1,  2, -1,  0,  0, -2, -7, -4],
    "E":[ 0, -5,  3,  4, -5,  0,  1, -2,  0, -3, -2,  1, -1,  2, -1,  0,  0, -2, -7, -4],
    "F":[-3, -4, -6, -5,  9, -5, -2,  1, -5,  2,  0, -3, -5, -5, -4, -3, -3, -1,  0,  7],
    "G":[1, -3,  1,  0, -5,  5, -2, -3, -2, -4, -3,  0,  0, -1, -3,  1,  0, -1, -7, -5],
    "H":[-1, -3,  1,  1, -2, -2,  6, -2,  0, -2, -2,  2,  0,  3,  2, -1, -1, -2, -3,  0],
    "I":[-1, -2, -2, -2,  1, -3, -2,  5, -2,  2,  2, -2, -2, -2, -2, -1,  0,  4, -5, -1],
    "K":[-1, -5,  0,  0, -5, -2,  0, -2,  5, -3,  0,  1, -1,  1,  3,  0,  0, -2, -3, -4],
    "L":[-2, -6, -4, -3,  2, -4, -2,  2, -3,  6,  4, -3, -3, -2, -3, -3, -2,  2, -2, -1],
    "M":[-1, -5, -3, -2,  0, -3, -2,  2,  0,  4,  6, -2, -2, -1,  0, -2, -1,  2, -4, -2],
    "N":[0, -4,  2,  1, -3,  0,  2, -2,  1, -3, -2,  2,  0,  1,  0,  1,  0, -2, -4, -2],
    "P":[1, -3, -1, -1, -5,  0,  0, -2, -1, -3, -2,  0,  6,  0,  0,  1,  0, -1, -6, -5],
    "Q":[0, -5,  2,  2, -5, -1,  3, -2,  1, -2, -1,  1,  0,  4,  1, -1, -1, -2, -5, -4],
    "R":[-2, -4, -1, -1, -4, -3,  2, -2,  3, -3,  0,  0,  0,  1,  6,  0, -1, -2,  2, -4],
    "S":[1,  0,  0,  0, -3,  1, -1, -1,  0, -3, -2,  1,  1, -1,  0,  2,  1, -1, -2, -3],
    "T":[1, -2,  0,  0, -3,  0, -1,  0,  0, -2, -1,  0,  0, -1, -1,  1,  3,  0, -5, -3],
    "V":[0, -2, -2, -2, -1, -1, -2,  4, -2,  2,  2, -2, -1, -2, -2, -1,  0,  4, -6, -2],
    "W":[-6, -8, -7, -7,  0, -7, -3, -5, -3, -2, -4, -4, -6, -5,  2, -2, -5, -6, 17,  0],
    "Y":[-3,  0, -4, -4,  7, -5,  0, -1, -4, -1, -2, -2, -5, -4, -4, -3, -3, -2,  0, 10]
    }
    return penality
def getInedexOfLetter():
    index={
    "A":0,
    "C":1,
    "D":2,
    "E":3,
    "F":4,
    "G":5,
    "H":6,
    "I":7,
    "K":8,
    "L":9,
    "M":10,
    "N":11,
    "P":12,
    "Q":13,
    "R":14,
    "S":15,
    "T":16,
    "V":17,
    "W":18,
    "Y":19
    }
    return index
if __name__ == '__main__':

    x = '''MEANLY
PENALTY'''
    inlines = x.split('\n')
    first = inlines[0]
    second = inlines[1]
    res = localalignment(first, second)
    print(res)


    x='''AMTAFRYRQGNPRYVKHFAYEIRLSHIWLLTQMPWEFVMGIKMPEDVFQHWRVYSVCTAEPMRSDETYEQKPKPMAKWSGMTIMYQAGIIRQPPRGDRGVSDRNYSQCGKQNQAQLDNNPTWTKYEIEWRVQILPPGAGVFEGDNGQNQCLCPNWAWEQPCQWGALHSNEQYPNRIHLWAPMSKLHIKIEKSSYNRNAQFPNRCMYECEFPSYREQVDSCHYENVQIAFTIFSGAEQKRKFCSCHFWSNFIDQAVFSTGLIPWCYRRDDHSAFFMPNWNKQYKHPQLQFRVAGEGTQCRPFYTREMFTKVSAWRIAGRFAGPYERHHDAHLELWYQHHKVRTGQQLGIIWNNRDKTRNPCPFSAYYNKLPWWKINQNAFYNCLQNIAHSTHDETHEFNPVKCIDWLQGTMVPTECKKGFVHEKCECYRNPGPPLHDMYHQMEDIFGVRFDCLTGWKHLSDYNPCQERRNINDFYIFAYEIAPAVKNLVLSPQPLADATKKCAFNYTPLDQSPVVIACKWYIHQPICMLLIVLICAMDKYNAHMIVIRTTEGQQPMHACRMTEGPGMCMKEPLVTFTLPAQWQWPNHEFKYVYMYVLNYHLSQYTYTDEGHAGGQHYSFNVAVDVGMAWGHNRCYCQPACYSQQETQTRTIDYEKWQYMKHQAFKWGLWFCEQERHAWFKGQNRCEMFTAKMTRMGADSNLDQYKLMLAQNYEEQWEQPIMECGMSEIIEIDPPYRSELIFTFWPFCTYSPWQNLIKCRCNNVIEEMDQCVPLTFIGFGVKQAGGIQAWAFYKEEWTSTYYLMCQCMKSDKAQYPYEIILFWMQPMDTGEQEPPQQNMWIFLPHSWFFDWCCNAPWSEICSSRHDHGQCQDAFYPCELFTVFDDIFTAEPVVCSCFYDDPM
WQEKAVDGTVPSRHQYREKEDRQGNEIGKEFRRGPQVCEYSCNSHSCGWMPIFCIVCMSYVAFYCGLEYPMSRKTAKSQFIEWCDWFCFNHWTNWAPLSIVRTSVAFAVWGHCWYPCGGVCKTNRCKDDFCGRWRKALFAEGPRDWKCCKNDLQNWNPQYSQGTRNTKRMVATTNQTMIEWKQSHIFETWLFCHVIIEYNWSAFWMWMNRNEAFNSIIKSGYPKLLLTQYPLSQGSTPIVKPLIRRDQGKFWAWAQMWWFREPTNIPTADYCHSWWQSRADLQNDRDMGPEADASFYVEFWYWVRCAARTYGQQLGIIWNNRLKTRNPCPYSADGIQNKENYVFWWKNMCTKSHIAFYYCLQNVAHYTHDVTAEFNPVKCIDWLQGHMVLSSWFKYNTECKKLFVHEKCECYRMFCGVVEDIFGVRFHTGWKHLSTAKPVPHVCVYNPSVQERRNINDFYIFYEIAPAVKNLVLSAQPLHDYTKKCAFNYTPITITRIISTRNQIIWAHVVIACQFYSPHQMLLIELAMDKYCADMNVRRSTEGHQPMHACRSTFGPGMAAKEPLVTFTLVAFWQWPNHEFQYVYMYTEDKIIQIGPHLSNGCEMVEYCVDCYAKRPCYRAYSAEAQYWRMITEAEDYSYKTRNAIAATATVRGQYCHPFRWLGIVWMAHHDCFFANECGTICIPQMAEMRPPETTPYEIDIIFMMFWKEHMSTTILDVVGMYRPATFSHWHDAHHQCEPYLTPLMCQSKLVFDAAFTQVGVKGVWYHTEKLELMAGFNHMKFKKEEAQQSCFYWFQDCPDYDPPDAVRKTDEKHIRAHGEIWWLMRYYCMYHILHIASRHEWMHLRWDQACTNPGYELFEFIPWVLRRYVVYDKIRYNYSYRNSASMEFV'''
    inlines=x.split('\n')
    first=inlines[0]
    second=inlines[1]
    #res=localalignment(first,second)
    #print(res)
    #KRIVO

    x = '''KACFCNHTIVLPYSNAFYFSPWPNSDLVRQNAESYCSWTANFMDLFHLVHFIFSECYICGHYEQLGHSVERGIANILIPTRYKDFMMCVCYMDKTATAAKHLHYNRNAMRGASKWQWMDQDTFGAMSSQALYMECPAHCAVNRMRNLCVCGHNDYIPLQKMCMKPVHRMRRPMNLQRHWVYHWPWVDDCFKYKAFICGNALRVCYDQWVMTLFKVVHQPRMGDHVTVYNDCSCDIAYHEFFHRIYQDMHMNYNHSDGKHLFWFYMRYKGGYGRHRCGWTNKWNENAVQHRECSHQHPHTFHRDIHVVWCAVAVNSNCIIPTGQFEETMAMHVWYLSDYPVTSTQAQWKATAEATNARRNWAFDCSCWCRHPWLACFNDVDTTARVYYLQRWFAKCRFVRLSQYADQLKGTTWWTAASFPEKTETTPTWWMVFKHFPDLHQAEDHSDLDLYDDLKRWNDTGFWLTKYMASYTSARFPQDNYPQVQRTHWVGHWLGVYFEARGYRERAHPMGSLYGKNWEMWHKINCAQRRWSYQGGMPQSHDNCQIIHCSGNMEHMESINDKFWHYPICWPTLPAVMWWTPARTEPQQGQTNHIQIATAISAHQKPRQWKYKDILSPGQKTLYIHPVQYLFATAVVRNCWTELYDFHERSINGGGCGEVKWYQNDVYYEKYMEMKYQEMMKMTCTCMKEHDAQCYMNWSQNEWIAVFPKNLMMKPCTCVKCFNYSKYPCIDREKIAIWVMYMNFQTNLQFQQEERMLWRAANKYWGYPRVWWYHLWDFHKFGAYPLDIHCQAYYHMPYAFRIITFNVFHDKVMDSMDHWIRFDDRQQSAEMLHISVCFIHYGCGHWNAARENHRGNDEEYKIKTIFNSRCAYMAYVCNDPFRLASFHPWASNRLFYYTHMANKCCGMMWRQSWKVVQHAVYGGMFHCIAVYHCLRNPRHCWFNWGDGGEREYRGSKPEIKFRDYYARAAVEVKVLGILGPWNSHWDVGYAFAMQGFHTDPESNKYCMQLSTSVFSQNWIHSKIPFFTEFTARHVFYDSDCFPTPWQMGVSFWRCRHALISFNVPYEDDLVICAQENEKHLIKCPRSTWCYCDMLFHLPNPYPRIQANFTDLNRVWDIRFNPAAVFDRTMAEVLVPTKYQSEIYSGRVGGCCITHIETSWKKLSSDRCGEPGASKRGVKSVHSGYGELPWISHVGECNCIMHYFPNYHCPITWFLNHKEQRAFCWDQFKQVKGHKWMKILPQFSYSWRPDKRCDGIMEGQMFYFRRWPNGRTPIVLPVRWIKTKFRRAHSTVDKVYIIDNQTAQKHRYLQVIDGDYGCQIEAWVMNDKRKNNCEQIYMMHMYIMACITWQQIAFAIWSHVNNFCKVSWLPLCWIEDNIVGMRIHNRKTKPCKFFEYLPQPCKWIFQTEDSFFHPGSHFPQCVGCAYLKNHLWHCHAQWPHLMGKAWRRTWNKHGVEYEYPAGPSYAYKELAYCYDRMEAMPCEESGDNRETACEKKSGVFFASFQQKNVTCFRVMHEDAHMCCSQEYADDVWYDNNDMIEKDACRMGELWLFQNFLSGCLMLETNDPQCNEKNKLNTRVFQCHGRGLYFPPWGATMTEPIDMCDVKKCLDREATLNYCFWKRVGVHQDSKSHRPGDKYTEVGVCPAWLSIYACTVFFYPFYVGPSCIMVDFNDRYCMRHQPKKSLGIWASSDNYVVTMCREDIPPCFMWNWNSASTTSWFSKQMANLYTWMAGYYMKSRVGWPWMMFKAHCRHDWNIEWAYYHKRGPHMMCAKIKESTAKHYRLCYPSYAPGRQRCYHICHMAMVTFYIWLMVAFWRKTMTFLTKCGKPGIFPLLTQQLHNDDEWCAKEQTHAFQEWHESIPCLYPMSLAGTKEWAKVAFKFDVNLQCEVWQFHDRFCSKWFFAFNELFLRVTFIFIQITKYNHEKDFGLELPCWQVFMCYENFPIGYIIPCTTDNLRNLLKPYDNVPVSRCSSAKTMEQWDDASDAIKTGDAMTSDHLYSMRVYPDYCSYIASWMYCVIEQYYMPEHNYLYKRSWCKPDWVGFKQHPHKAFIKSFSRIDPTHTHIAPGNLFCQNTQWEFARGNTSAAKCLACQLDCLPELVSNLLQMEHLKCIWCECANDRLGTTLRTRKIRLDPMHIWNELARTIEHHTKNLKFDHSNTPNMRCTLHGSHMCEYSHIGSYRHRQCTAEKSDNPGYGCLFARMESCACAQKRHYGFCVPVCHRKQDRKYFPDYFKIVIGIEGEQVQVAQINWIGWCANMENQQPTPYQPEYHGPAQITKWEISMKLDRDLHPEPGGGWKWDINLFIFLLCIHQDCWESYAMNGPLCHMRKGHKVMIESPEVPFDMHVEKCMTRNPCWPMMHGWEHRDARPLYAICPYVEFTSRWDAIHVSPGAACQCNVTGEIYGICRICRSLKRGDYKPNWKGDGQYAVSGDYVLSQDAGNGLRGDDMHEDDRDYPMRHNNKYDSRYIFNMMTQKQWPYARHTSAPKIKEQLLYQGCFCYASGTSRMSQQALYESLAQLKCHCQPGSFEEQQFAFVPFMCECRDIMHYQSHNGMSQTERDRCGLSTCTNLWKNMAWVPAYSLMNWSWGEEFISKTSVCVCLTPCFALEYWDCINQRMIWWESVKGVYCLELCARACVKQFGFNDPPCFYFYPALHDEGKMDMEAMQALFKYPRSIAIARLHGIACPLTYNWLVGHNWQWI
TFPMCKMFRWPLHQKTNETFVSPDRVHKGWQNRQHKNNMLRGTYMNGTPHRKLNENHFPPGEGYGHCDGHDRDYNCPTANVCYWKWLRVLIHPGTCPVTFLESNEEFNCVEAEDMAANVYQDNDHFTYPIVRTPRMMDTESLCHHTMLANSDTCVEVDQNQSQEDVGSSCKANMRGCWYFINYPRSHERIGHHFKSWHYAFTSMSNPKRSWDSNKAKGPETVGKQGHLQKDPTDKPDKLTSSSEESWNCHYNRMFQQLPPFMSTDFTKIPLNNCVIAFPETQLHICRTMHNWKCGDKDDDIFCSWSSHCNQHKFPWCFKFWEVTSHDKHNQWLFWGTIGAMFIYQEHYYREDIYHTKRCDDLSRYSIMRFCDDFDWGGEMPWVWAGGEYIRKVKFWPTHWLGRELCKLQNIKVPSVGWPCCYEQAYPFCVWMCTNRPFVFTWQCKFPHAEIRMGQTNLWINQLYFQNRTMDQCMRTINWEWVEPWRLCQHMFIMWQNRIYTRSNKHKHNEWYNECPADRKQRFRIASECDSVQETQNPVAWAMPWYQKAKMVHPSVDWDTYWKTMLKPDSHSYELKFSDDVCPRRIKEWPWGKTLKRIEGRRIMVWWVHYLREDRYTLNVEYYETFQCKAGCGYHHTQSRQAPERQYCGGKRPLNLHAYLGMRLSDKCNWEDYSEALMIEPPNFHDEVERENLFCYHSYVQSVNSRPNKEPITNQDAYYESYCWYSQKQTPDRNMHHHHGAELHGHPDKWNMQYAIPVQHDLRTFVVVPNWCKKKFGTSEKHAQWRFRVVINWTFNQFHLYMFYAKPMDSHGDRYFTNCTFGSRNNSAECGCCLHASVCSIHYGCGHWNIYDASNENHRGNDNTEPGEYKIKTIFNSRCAYMAAVGFQFHDFRAMLEHYWASNRLRYYTHMANKCCGMSWKFHCIAVWKDNLWHAHCLRNPRCGKCFFNWGDGDGSCDEREYEGSKPEIKFRDYVEVKVLGILGPWNPHSDVGYAFAMKMLQCTIMFHTDPESNKYMAEMQLQCIFDGGSQNRSHCRIYSKYCELKGCPIFVFWVHSHDGNMNTRGWMIVARHVFYDSDCFPTQSSWPWSMGVSFPERCRHALISCVPHDLVICQQEALIKWWSWDRKFHFNLFTLPNPYPRIQATSSDLLNRMVHCEMYGVWVIRFNPAAGPTAEMPLILNIMVKFTDLTKYQSEIYSGRVGGNCITHIETCSYIQFQDWKKLSSDRCGMAMISRPGASERGVKSVHSGYGELPWISHVHECRVNCIGDKYSMCHYFPNYHCPITWFLNHKTKVHGRAFFWDQFKQVKGHCWHKQQVRILDIFTFMNPQFSHSWRPGGRAWGDDGMDFSMINMEGQMFKWYRWPNGVLPVRWDKTKFAHSTVDKVDITAQKHRYLQVDYGCQIEAWNAQMNDKRKNFTLFDWGERCCQIYMMHMYIMACITWQQFCKVSWLPLCHISTFYDENISGMRIHNRKTKPCKFGEYLPQPCVTIETIDWIFQTEDSFFHPYLSECTFVCVGCAYLKNHYRAQWHHLMGKAWTHMGFFRTWNKHGVEYEFLQTPAGPSYSAQYYICQGHRMEAMGDMNRDTACEKKDYFERAFDYGVFFAFFAQKNQQCYRVMHEDAHMCYYDQASEFEYADDVWDWCRQDNNDMIEKDACRNFCAAPFLSGCTCLMELETCWTNTLFEFQCHGRGLYFPPWGDPVWYITMIDMVKWCLDREFYSTFVLNHIQMHNYCFWKRGGVHQDMKSHDFRHLGTYHDYLFCNSLGIRQSISLVNCPIYAMVLVKACFETLTSCECPPKSASSDNWVFPCFMWNWDSSASTRFMNPYNSEFTWMAGYMMFKAMCRHQCEAMQWNIEWAYYHMANFCRAGSYVWPHMEKHYYAPGRQRCYHICHMAMMVAFWPSWRAGRTKCGLTESNNQLCVFILHEGACFQEWCESIPCLLPGLERSPMCCDGEQGEDPFLMDPANDPSADQEHAMDHGPWQNFNGDFTVIDYCAMTVEGILVPEECRKDLIHVGSLRHLWFTSSPMNWDPHNSTHAFAKITFSMGHSKICSRSLFVAQFVNLVNNAVLVQPTNFLIAGVGCPYQSYDDYIECHTNHARVLHPEYSLTDEYSEIGFKHDDVYVSMRTLETGRTRSWWDWWLCIALNSTAFIYQCYSYDYFIRFMNDTEVTAWWLCQKSIPGKHPTENNWQMSQYVIRYARLPREPIVDYKATPHRLDDLCMYWGKVAGSPTKIVFDGMIAYTEPGNGLCENFHTRLHTDGWEKRTFMCETWAKDVVRFWLHWGNCSIGINMGNRYGCQYSLARPVYPKSSMTAVKDYEPTKRMDNHPQCCWDSFQKCFTDVVRGRDLQSEYSHQVTWEHEFYVWMATVLTIWHNHGIHTCDMICECYKQPGLDSSHKNKHTRNWHAGYHVLIDIVQGEIFMSPTVWHTMPMWVPRQLCEDETSPQDVPSFNCGKDACAAEWNFPYYTAMYSAYAWVMEMARMQESHLCGFSMCLAFNYEGCTLPCKYPKMWKMLGETLNMQCHIPWIQPRQQPLLNYACYSKESIITRATEKCFVVQTKPVSISVAAVGYIYWMCQRTQYAGKCGQHMIKLNPCFRTWTEFIFVTRCSSYAPMIRPRHTECYMGTDAHPSNYHTRSPCWEQCWLVWVSKINGYKPRANMRYVFSDPDEGRKAKVTHCHHFFDQAANVGRPNYRVYEMFHMPLHAEIQKSARDLAIFTTNMGELIWEFQGRDVHLDKRQPWRKFFTENKLMKFSIRECKRWCSPEFFVSTYVHSDSERFRAMC'''
    inlines = x.split('\n')
    first = inlines[0]
    second = inlines[1]
    #res = localalignment(first, second)
    #print(res)
    #3121
    #-KAC - -FCNHTIVLPYSNAFYFSP - WPNSD - LVRQNAESYCSWTANFMDLFHLVHFIFSEYICGH - YEQLGHSVERGIANILIPTRYKDFMMCVCYMDKTATAAKHLHYNRNAMR - GASKWQWMDQDTFGAMSSQALYMECPAHCAVNRMRNL - CVCGHNDYIPLQKMCMKPVHRMRRPMNLQRHWVYHWPWVDDC - FKYKAFICGNALRV - -CYDQWVMTLFKVVHQPRMG - DHVTVYNDCSCDIAYHEFFHRIYQDMHMNYNHSDGKHLFWFYMRYKGGYGRHRCGWTNKWNENAVQHRECSHQHPHT - FH - -RDIHVVW - CAVAVNSN - CIIPTGQFEETMAMHVWYLSDYPVTSTQAQWKATAEATNARRNWAFDCSCWCRHPWLACFNDVDTTARVYYLQRWFAK - CRFVRLSQYADQLK - -GT - TW - WTAASFPEKTETTPTWWMVFKHFPDLHQAEDHS - DLD - LYDDLKRWNDTGFWLTKYMA - SYTSA - RFPQDNYPQVQRTHWVGHWLGVYFEARGYRE - -RA - H - P - MGS - -LYGKNWEMWH - KI - -NCA - QRR - -WSYQGGMPQSHDNCQI - IHCSGNMEHMESIN - DKFWHYPICWPTLPAVMW - --WTPARTEPQQGQTNHIQIATAISAHQ - KPRQW - K - YKDILSPGQKT - -L - YIHPVQY - LFATAVVR - NCWTE - LYDF - HERSINGGG - CGEVKW - YQNDVYYE - KYMEM - K - --YQEMMKMTCTCMKEH - D - AQ - -CYMNWSQNEWIAVFPKNLMMKPCTCVKCFNYSKYPC - IDREKIAIWVMYMNFQTNLQFQQEERMLWRAANKYWGYP - -R - VWWY - HL - -WDFHKFGAYPLDIHCQ - AY - YHMPYAFRIITFNVFHDKVMDSM - DHWI - R - -FDDRQQSAE - M - -LHISVCFIHYGCGHW - --NAARENHRGND - -E - -EYKIKTIFNSRCAYMAYVC - N - DPFR - LASFHPWASNRLFYYTHMANKCCGMMWRQSWKVVQHAVY - GGMFHCIAVYHCLRNPR - -HCWFNWGDG - G - --EREYRGSKPEIKFRDYYARAAVEVKVLGILGPWNSHWDVGYAFA - -M - Q - G - -FHTDPESNKY - C - MQLSTSVF - --SQ - --N - WIHSK - --I - --P - F - F - --T - E - -F - T - -----ARHVFYDSDCFPT - ---PWQMGVSFW - RCRHALISFNVPYEDDLVICAQENEKHLIKCPRSTW - C - YCDM - LFHLPNPYPRIQANFTD - LNR - -------VWDIRFNPAA - -VFDRTMA - EVLV - -P - -TKYQSEIYSGRVGGCCITHIET - S - -----WKKLSSDRCG - ---E - PGASKRGVKSVHSGYGELPWISHVGEC - -NCI - ----M - HYFPNYHCPITWFLNHK - E - Q - RAFCWDQFKQVKGHKW - ---MKIL - ------PQFSYSWRP - DK - RC - DG - ----I - MEGQMF - YFRRWPNGRTPIVLPVRWIKTKFRRAHSTVDKVYIIDNQTAQKHRYLQVIDGDYGCQIEAW - V - MNDKRKN - ---N - ---CEQIYMMHMYIMACITWQQIAFAIWSHVNNFCKVSWLPLCWI - ---EDNIVGMRIHNRKTKPCKFFEYLPQPC - -----KWIFQTEDSFFHP - -G - SHFPQCVGCAYLKNHLWHCHAQWPHLMGKAW - R - ---RTWNKHGVEYEY - --PAGPSYAYKELAY - CY - DRMEAMPCEESGDNRETACEKK - ----S - --GVFFASFQQKNVTCFRVMHEDAHMC - C - --SQ - EYADDV - -WY - -DNNDMIEKDACRMGELWLFQNFLSGCL - MLETNDPQCNEKNKLNTRVFQCHGRGLYFPPWGATMTEPIDMCD - VKKCLDRE - -AT - -L - -----NYCFWKRVGVHQDSKSHRPGDKYTEVGVCPAWLSIYACTVFFYPFYVGPSCIMVDFNDRYCMRHQPKKSLGIWASSDNYVVTMCRED - IPPCFMWNWNSASTTSWFSKQMANLYTWMAGYYMKSRVGWPWMMFKAHCRH - DWNIEWAYYHKRGPHMMCAKIKESTAKHYRLCYPSYAPGRQRCYHICHMAMVTFYIWLMVAFWRKTMTFLTKCGKPGIFPLLTQ - QLHNDDEWCAKEQTHAFQEWHESIPCLYP - M - -S - LAGTKEWAKVAFKFDVNLQCEVWQFHDRFCSKWFFAFNELFLRVTF - -IFIQ - I - TKYNHEKDFGLELPC - WQVFMCYENFPIGYIIPCTTDNLRNLLK - PYDNVPVSR - CSSAKTMEQWDD - ASDA - -IKTGDAMTSDHLYSMRVYPDY - -CSYIASW - M - --YCVIEQY - ---YMPEHNYLYKR - ---SWCKP - -D - WVGFKQHPHKAFI - KSFS - R - -ID - PTHTHIAPGNLFCQNT - QWEFARGNT - SAAKCLACQLDCLP - ELVSNLLQMEH - LKCIWCECANDRLGTTLRTRKIRLDPMHIWNELARTI - EH - HTKNLKFDHSNTPNMRCTLHGSHMCE - YS - HIGSYR - HR - QCTAEKSDNPGYGCLF - -AR - M - ESCACAQKRHYGFCVPVCHRKQ - DRKYFPDYF - KIVIGIEGEQVQVA - QINW - IGWCANMENQQPTPYQPEYHGPAQITK - WEISMKLDRDLHPEPGGGWKWDINLFIFLLCIHQDCWESYAMNGPLCH - MRK - GHKVMIESPEVPFDMHVEKCMTRNPCWPMMHGWEHRDARPLYAICPYVEFTSRWDAIHVSPGAACQ - CNVTGEI - YGICRICRSLKRGDYKPN - WKGDGQYAVSGDYVLSQDAGNGLRGDDMHEDDRDYPMRHNNKYDSRYIFNMMTQKQWPYARHTSAPKIKEQLLYQGCFCYASGTSRMSQQALYESL - AQLKCHCQPGSFEE - QQFAFVPFMCECRDIMHYQSHNG - -M - SQTERDRC - GLSTC - TNLWKNMAWVPAY - SLMNWSWGEEFI - SK - TSVCVC - LTPCFALEYWDCINQRMIWWESVKGVYCL - ELCARACVKQFGFNDPPCF - YFYPALH - D - EGK - MDMEAMQALFK - YPRSIAIA - RLHGIA - -C - PLTY - N - WLVGH - NWQW - I -
    #FPMCKMF - RWPLHQKTNETF - VSPDRVHKGWQNRQHKNNM - LR - GTYMNGTPHRKLNENHFPPGEGYGH - CDGHDRDYNCPTANVCYWKWLR - V - LIHPGTCPVTFLE - SNEEFNCVEAE - D - MAANVYQD - NDH - -F - TYPI - VRTPRMMDTESLC - HHTMLANSDTCVE - VDQNQSQEDVGS - -SCK - ANMRGCWY - FINYPRSHE - RIGHHFKSWHYA - FTSMSNPKRSWDSNKA - KGPE - TVGKQGHLQKDPTDKP - D - KLTSSSEESWNC - HYNRMF - QQLPPFMST - DFTKIPLNNCVIAFPETQLHICRTMH - NWKCGDKDDDIFCSW - SSHCNQHK - FP - WCF - KF - -------WEVTSH - -DKHNQWLF - ---WGTIGAMFIYQEHYYREDIYHTKR - CDDLSRYSIM - RFCDDFDWGGEMPWVWAGGEYIRKVKFWPTHWLG - RELCKLQNIKVPSVGWPCCYEQ - A - YP - FCVWMCTNRPFVFTWQCKFPHAEIRMGQTNLWINQ - L - -YFQNRTMDQCMRTINWEWVEPWRLCQHMFIMWQNRIYTRSNKHKHNEW - YNECPADRKQRFRIASECDSVQETQNPVAWAMPW - YQKAKMVHPSVDWDTYWK - TMLKP - DSHSYELKFSDDVCPRRIKEWPWGKTLKRIEGRRIMVWWVHYLREDRYTLNVEYYETFQCKAGCGYHHTQSRQAPERQYCGG - KRPLNLHAYLGMRLSDKCNWEDYSEALMIEPPNFHDEVERENLFCYHSYVQS - -VNSRP - N - -KEPITNQDAY - YESY - CWYSQKQTPDRNMHHHHGAELH - GHPDK - -W - NM - QY - AIPVQHDLRTFVVVPNWCKKKFGT - S - EKHAQWRFRVVINWTFNQFHLYMFYAKPMDSHGDRYFTNCTFGSRNNSAECGCCLHASVCSIHYGCGHWNIYDASNENHRGNDNTEPGEYKIKTIFNSRCAYMAAVGFQFHDFRAMLE - HYWASNRLRYYTHMANKCCGMSWK - -FHCI - -AVWKDNLWH - -A - -HCLRNPRCGKCFFNWGDGDGSCDEREYEGSKPEIKFRD - Y - ---VEVKVLGILGPWNPHSDVGYAFAMKMLQCTIMFHTDPESNKYMAEMQL - QCIFDGGSQNRSHCRIYSKYCELKGCPIFVFWVHSHDGNMNTRGWMIVARHVFYDSDCFPTQSSWPWSMGVSFPERCRHALIS - CVP - -HDLVIC - QQ - E - ALIK - -WWSWDRKF - HFNLFTLPNPYPRIQATSSDLLNRMVHCEMYGVWVIRFNPAAGPTAEMPLILNIMVKFTDLTKYQSEIYSGRVGGNCITHIETCSYIQFQDWKKLSSDRCGMAMISRPGASERGVKSVHSGYGELPWISHVHECRVNCIGDKYSMCHYFPNYHCPITWFLNHKTKVHGRAFFWDQFKQVKGHCWHKQQVRILDIFTFMNPQFSHSWRPGGRAWGDDGMDFSMINMEGQMFKWY - RWPNG - ---VLPVRWDKTKF - -AHSTVDKV - DI - --TAQKHRYLQ - V - -DYGCQIEAWNAQMNDKRKNFTLFDWGERCCQIYMMHMYIMACITWQQ - ----------FCKVSWLPLCHISTFYDENISGMRIHNRKTKPCKFGEYLPQPCVTIETIDWIFQTEDSFFHPYLSECTFV - CVGCAYLK - N - -HYRAQWHHLMGKAWTHMGFFRTWNKHGVEYEFLQTPAGPSYS - AQY - YICQGHRMEAM - -GDM - -NRDTACEKKDYFERAFDYGVFFAFFAQKNQQCYRVMHEDAHMCYYDQASEFEYADDVWDWCRQDNNDMIEKDACR - -NF - CAAPFLSGCTCLMEL - ET - CW - TNTLFE - -FQCHGRGLYFPPWGDPVWY - ITMIDMVKWCLDREFYSTFVLNHIQMHNYCFWKRGGVHQDMKSH - --D - FRHLGTYHDYL - -F - CNS - L - G - -IRQSISLVNCP - IYAM - VLVKACFETLTSCECPPKSASSDNWVFPCFMWNWDSSAST - RFMNPYNSEFTWMAG - YMMFK - --A - -MCRHQCEAMQWNIEWAYYH - M - AN - FC - RAGSYVWPHMEKHY - -YAPGRQRCYHICHMAMMVAF - W - -PS - WRAGR - --TKCGLTESNNQLCVFILH - EGA - C - ------FQEWCESIPCLLPGLERSPMCCDGEQGEDPFLMDPANDPSADQEHAMDHGPW - QNFNGDFTVIDYCAMTVEGILVPEECRKDL - IHVGSLRHLW - -FTSSPMNW - DP - -HNSTHAFAKITF - SMGHSKICSRSLFVAQFVNLVNNAVLVQPTNFLIAGVGCPYQSYDDYIECHTNHARVLHPEYSLTDEYSEIGFKHDDVYVSMRTLETGRTRSWWDWWLCIALNS - TAFIYQCYSYDYFIRFMNDTEVT - AWWLCQKSIPGKHPTENNWQMSQYVI - RYARLPREPIVDYKATPHRLDDL - CMY - WGKVAGS - PT - KIVFDGMIAYTEPGNGLCENFHTR - L - --HTDGWEKR - TF - ---MCETWAKDVVRFWLHWGNCSIGINMGNRYGCQYSLARPVYPKSSMTAVKDYEPTKRMDNHPQCCWDSFQKCFTDVVRGRD - LQSEYSHQVTWEHEFYVWMATVLTIWHNHGIHTCDMICECYKQP - GLDSS - HKNK - HTRNWHAG - YHVLIDIVQG - -EIF - MSPTVWHTMPMWVPRQLCEDETSPQDVPSFNC - GKDAC - A - AE - W - --NF - PYYTA - MYSAY - A - W - VMEMARMQESHLCGFSMCLAFN - YEGC - TL - PCKY - PKMWK - ----ML - GE - TLNMQC - HIPW - --IQ - -PRQQPLLNYACYSKESIITRATEK - -CFVVQTKPVSISVAAV - -G - YIY - ----WMCQRTQYAGKCGQHMIKLNP - CFRTWTEFIFVT - RCSSYAPMIRPRHTECYMGTDAHPSNYHTRSPCWEQCW - -LVWVSKINGYKPRA - NMRYVFSDPDEGRKAKVTHC - H - HFFD - QAANVG - RPNYR - VYEMFHMPLHAEIQK - SARDLAIFTTNMGELIWEFQGRDVHLDKRQPWRKFFTENKLMKFSIRECKRWCSPEFFVSTYVHSDSERFRAMC
    #KRIVO
