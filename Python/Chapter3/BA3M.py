"""
A solution to a ROSALIND bioinformatics problem.
Problem Title: Generate All Maximal Non-Branching Paths in a Graph
Rosalind ID: BA3M
URL: http://rosalind.info/problems/ba3m/
"""

def graph2(adj):
    #Add all nodes as keys (even if they have not output degree > 0)
    adjDict=dict()
    for x in adj:
        x=x.split()
        adjDict[x[0]]=x[2].split(",")
        for node in x[2].split(","):
            if node not in adjDict.keys():
                adjDict[node]=[]
    return adjDict

def MaximalNonBranchingPaths(graph):
    Paths=[]
    for  v in non1to1(graph):
        if len(graph[v]) > 0:
            for w in graph[v]:
                NonBranchingPath=[[v,w]]
                while w not in non1to1(graph):
                    NonBranchingPath.append([w,graph[w][0]])
                    w=graph[w][0]
                Paths.append(NonBranchingPath)
    for cycle in isolatedCycles(graph):
        Paths.append(cycle)
    return Paths

def MaximalNonBranchingPathsPrint(paths):
    output=[]
    for x in paths:
        seq=x[0][0]+' -> '+x[0][1]
        for y in x[1:]:
            seq=seq+' -> '+y[1]
        output.append(seq)
    return '\n'.join(output)

def non1to1(graph):
    unbalancedNodes=[]
    for key in graph.keys():
        inputDeg=0
        for key2 in graph.keys():
            if key2!=key:
                for node in graph[key2]:
                    if node==key:
                        inputDeg=inputDeg+1
        if (inputDeg!=1 or len(graph[key])!=1):
            unbalancedNodes.append(key)
    return unbalancedNodes

def isolatedCycles(graph):
    Cycles=[]
    usedNodes=[]
    for key in graph.keys():
        if key not in usedNodes:
            if key not in non1to1(graph):
                if len(graph[key]) > 0:
                    usedNodes.append(key)
                    for w in graph[key]:
                        usedNodes.append(w)
                        path = [[key, w]]
                        while w not in non1to1(graph):
                            usedNodes.append(w)
                            if w==key:
                                Cycles.append(path)
                                break
                            path.append([w, graph[w][0]])
                            w = graph[w][0]
    return Cycles


if __name__ == '__main__':

    x='''1 -> 2
2 -> 3
3 -> 4,5
6 -> 7
7 -> 6'''
    inlines=x.split('\n')
    res=MaximalNonBranchingPathsPrint(MaximalNonBranchingPaths(graph2(inlines)))
    print(res)

    x='''0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7
7 -> 8
8 -> 9
9 -> 10
10 -> 11
11 -> 12
12 -> 13
13 -> 14,27
14 -> 15
15 -> 16
16 -> 17
17 -> 18
18 -> 19
19 -> 20
20 -> 21
21 -> 22
22 -> 23
23 -> 24
24 -> 25
25 -> 26
26 -> 27
27 -> 28
28 -> 29
29 -> 30
30 -> 31
31 -> 32
32 -> 33
33 -> 34
34 -> 35,48
35 -> 36
36 -> 37
37 -> 38
38 -> 39
39 -> 40
40 -> 41
41 -> 42
42 -> 43
43 -> 44
44 -> 45
45 -> 46
46 -> 47
47 -> 48
48 -> 49
49 -> 50
50 -> 51
51 -> 52
52 -> 53,61
53 -> 54
54 -> 55
55 -> 56
56 -> 57
57 -> 58
58 -> 59
59 -> 60
60 -> 61
61 -> 62
62 -> 63
63 -> 64
64 -> 65
65 -> 66
66 -> 67
67 -> 68
68 -> 69
69 -> 70
70 -> 71
71 -> 72
72 -> 73,85
73 -> 74
74 -> 75
75 -> 76
76 -> 77
77 -> 78
78 -> 79
79 -> 80
80 -> 81
81 -> 82
82 -> 83
83 -> 84
84 -> 85
85 -> 86
86 -> 87
87 -> 88
88 -> 89
89 -> 90
90 -> 91,105
91 -> 92
92 -> 93
93 -> 94
94 -> 95
95 -> 96
96 -> 97
97 -> 98
98 -> 99
99 -> 100
100 -> 101
101 -> 102
102 -> 103
103 -> 104
104 -> 105
105 -> 106
106 -> 107
107 -> 108
108 -> 109
109 -> 110
110 -> 111
111 -> 112
112 -> 113
113 -> 114,122
114 -> 115
115 -> 116
116 -> 117
117 -> 118
118 -> 119
119 -> 120
120 -> 121
121 -> 122
122 -> 123
123 -> 124
124 -> 125
125 -> 126
126 -> 127
127 -> 128
128 -> 129
129 -> 130
130 -> 131
131 -> 132
132 -> 133
133 -> 134
134 -> 135,149
135 -> 136
136 -> 137
137 -> 138
138 -> 139
139 -> 140
140 -> 141
141 -> 142
142 -> 143
143 -> 144
144 -> 145
145 -> 146
146 -> 147
147 -> 148
148 -> 149
149 -> 150
150 -> 151
151 -> 152,166
152 -> 153
153 -> 154
154 -> 155
155 -> 156
156 -> 157
157 -> 158
158 -> 159
159 -> 160
160 -> 161
161 -> 162
162 -> 163
163 -> 164
164 -> 165
165 -> 166
166 -> 167
167 -> 168
168 -> 169
169 -> 170
170 -> 171
171 -> 172
172 -> 173
173 -> 174
174 -> 175
175 -> 176,187
176 -> 177
177 -> 178
178 -> 179
179 -> 180
180 -> 181
181 -> 182
182 -> 183
183 -> 184
184 -> 185
185 -> 186
186 -> 187
187 -> 188
188 -> 189
189 -> 190
190 -> 191
191 -> 192,207
192 -> 193
193 -> 194
194 -> 195
195 -> 196
196 -> 197
197 -> 198
198 -> 199
199 -> 200
200 -> 201
201 -> 202
202 -> 203
203 -> 204
204 -> 205
205 -> 206
206 -> 207
207 -> 208
208 -> 209
209 -> 210
210 -> 211,222
211 -> 212
212 -> 213
213 -> 214
214 -> 215
215 -> 216
216 -> 217
217 -> 218
218 -> 219
219 -> 220
220 -> 221
221 -> 222
222 -> 223
223 -> 224
224 -> 225
225 -> 226
226 -> 227
227 -> 228
228 -> 229
229 -> 230
230 -> 231
231 -> 232,242
232 -> 233
233 -> 234
234 -> 235
235 -> 236
236 -> 237
237 -> 238
238 -> 239
239 -> 240
240 -> 241
241 -> 242
242 -> 243
243 -> 244
244 -> 245
245 -> 246
246 -> 247
247 -> 248
248 -> 249
249 -> 250
250 -> 251
251 -> 252
252 -> 253
253 -> 254
254 -> 255
255 -> 256
256 -> 257
257 -> 258
258 -> 259
259 -> 260,269
260 -> 261
261 -> 262
262 -> 263
263 -> 264
264 -> 265
265 -> 266
266 -> 267
267 -> 268
268 -> 269
269 -> 270
270 -> 271
271 -> 272
272 -> 273,280
273 -> 274
274 -> 275
275 -> 276
276 -> 277
277 -> 278
278 -> 279
279 -> 280
280 -> 281
281 -> 282
282 -> 283
283 -> 284
284 -> 285
285 -> 286
286 -> 287
287 -> 288
288 -> 289
289 -> 290
290 -> 291
291 -> 292
292 -> 293
293 -> 294
294 -> 295
295 -> 296
296 -> 297
297 -> 298
298 -> 299
300 -> 301
301 -> 302
302 -> 303
303 -> 304
304 -> 305
305 -> 306
306 -> 307
307 -> 308
308 -> 309
309 -> 310
310 -> 311
311 -> 312
312 -> 313
313 -> 314
314 -> 315
315 -> 316
316 -> 317
317 -> 318
318 -> 319
319 -> 300
320 -> 321
321 -> 322
322 -> 323
323 -> 324
324 -> 325
325 -> 326
326 -> 327
327 -> 328
328 -> 329
329 -> 330
330 -> 331
331 -> 332
332 -> 333
333 -> 334
334 -> 335
335 -> 336
336 -> 337
337 -> 338
338 -> 339
339 -> 320
340 -> 341
341 -> 342
342 -> 343
343 -> 344
344 -> 345
345 -> 346
346 -> 347
347 -> 348
348 -> 349
349 -> 350
350 -> 351
351 -> 352
352 -> 353
353 -> 354
354 -> 355
355 -> 356
356 -> 357
357 -> 358
358 -> 359
359 -> 340
360 -> 361
361 -> 362
362 -> 363
363 -> 364
364 -> 365
365 -> 366
366 -> 367
367 -> 368
368 -> 369
369 -> 370
370 -> 371
371 -> 372
372 -> 373
373 -> 374
374 -> 375
375 -> 376
376 -> 377
377 -> 378
378 -> 379
379 -> 360
380 -> 381
381 -> 382
382 -> 383
383 -> 384
384 -> 385
385 -> 386
386 -> 387
387 -> 388
388 -> 389
389 -> 390
390 -> 391
391 -> 392
392 -> 393
393 -> 394
394 -> 395
395 -> 396
396 -> 397
397 -> 398
398 -> 399
399 -> 380'''
    inlines=x.split('\n')
    res=MaximalNonBranchingPathsPrint(MaximalNonBranchingPaths(graph2(inlines)))
    print(res)

    x='''0 -> 220
1 -> 392
2 -> 311
3 -> 329
4 -> 237
5 -> 203
6 -> 362
7 -> 244
8 -> 115
9 -> 11
10 -> 126
11 -> 97
12 -> 302
13 -> 158
14 -> 80
15 -> 225
16 -> 174
17 -> 170
18 -> 60
19 -> 85
20 -> 29
21 -> 226
22 -> 282
23 -> 39
24 -> 92
25 -> 337
26 -> 281
27 -> 233
28 -> 312
29 -> 54
30 -> 288
31 -> 134
32 -> 131
33 -> 210
34 -> 355,283
35 -> 383
36 -> 95
37 -> 204
38 -> 265
39 -> 90
40 -> 336
41 -> 216
42 -> 154
43 -> 284
44 -> 172
45 -> 142
46 -> 32
47 -> 338
48 -> 56
49 -> 21
50 -> 376
51 -> 335
52 -> 215
53 -> 396
54 -> 319
55 -> 127
56 -> 308
57 -> 93
58 -> 287
59 -> 219,181
60 -> 279,341
61 -> 155
62 -> 232
63 -> 163
64 -> 7
65 -> 187
66 -> 81
67 -> 192
68 -> 73
70 -> 9
71 -> 43
72 -> 87
73 -> 94
74 -> 357
75 -> 364
76 -> 141,84
77 -> 235
78 -> 350
79 -> 183
80 -> 161
81 -> 316
82 -> 253
83 -> 306
84 -> 75
85 -> 207
86 -> 148
87 -> 301
88 -> 223
89 -> 146
90 -> 91
91 -> 208
92 -> 113
93 -> 27
94 -> 72
95 -> 12
96 -> 58
97 -> 321,272
98 -> 200
99 -> 135
100 -> 300
101 -> 327
102 -> 394
103 -> 139
104 -> 262
105 -> 140
106 -> 41
107 -> 153
108 -> 194
109 -> 44
110 -> 245
111 -> 381
112 -> 33
113 -> 106
114 -> 28
115 -> 249
116 -> 133,160
117 -> 111
118 -> 145
119 -> 242
120 -> 3
121 -> 238
122 -> 370
123 -> 132
124 -> 292
125 -> 348
126 -> 377
127 -> 272
128 -> 42
129 -> 222
130 -> 395
131 -> 195
132 -> 149
133 -> 101
134 -> 259
135 -> 118
136 -> 326
137 -> 138
138 -> 193
139 -> 375
140 -> 347
141 -> 184
142 -> 159
143 -> 100
144 -> 14
145 -> 47
146 -> 201
147 -> 385
148 -> 79
149 -> 71
150 -> 270
151 -> 61
152 -> 309
153 -> 173
154 -> 2
155 -> 365
156 -> 34
157 -> 359
158 -> 213
159 -> 52
160 -> 218
161 -> 258
162 -> 179
163 -> 114
164 -> 176
165 -> 369
166 -> 37
167 -> 271
168 -> 349
169 -> 16
170 -> 252
171 -> 363
172 -> 122
173 -> 151
174 -> 165
175 -> 185
176 -> 293
177 -> 109
178 -> 356
179 -> 69
180 -> 130
181 -> 110
182 -> 103,48
183 -> 38
184 -> 13
185 -> 143
186 -> 177
187 -> 102
188 -> 65
189 -> 198
190 -> 55
191 -> 255
192 -> 167
193 -> 53
194 -> 117
195 -> 57
196 -> 324
197 -> 314
198 -> 344
199 -> 66
200 -> 390
201 -> 48
202 -> 345
203 -> 51
204 -> 152
205 -> 352
206 -> 136
207 -> 261
208 -> 234
209 -> 260
210 -> 160
211 -> 30
212 -> 1
213 -> 189
214 -> 70
215 -> 343
216 -> 277
217 -> 22
218 -> 129
219 -> 289
220 -> 182
221 -> 248
222 -> 236,37
223 -> 399
224 -> 257
225 -> 196
226 -> 263
227 -> 40,31
228 -> 303
229 -> 10
230 -> 378
231 -> 367
232 -> 340
233 -> 246
234 -> 15
235 -> 46
236 -> 150
237 -> 227
238 -> 23
239 -> 63
240 -> 191
241 -> 274
242 -> 333
243 -> 83,377
244 -> 298,363
245 -> 393
246 -> 291
247 -> 137
248 -> 380
249 -> 6
250 -> 20
251 -> 280
252 -> 36
253 -> 331
254 -> 389
255 -> 67
256 -> 320
257 -> 108
258 -> 304
259 -> 391
260 -> 62
261 -> 264
262 -> 45
263 -> 212
264 -> 229
265 -> 250
266 -> 231
267 -> 386
268 -> 296
269 -> 384
270 -> 361
271 -> 325
272 -> 294
273 -> 286
274 -> 206
275 -> 84
276 -> 96
277 -> 322
278 -> 228
279 -> 239
280 -> 358
281 -> 86
282 -> 278
283 -> 387
284 -> 313
285 -> 112
286 -> 88
287 -> 283
288 -> 382
289 -> 199
290 -> 372
291 -> 82
292 -> 24
293 -> 8
294 -> 295
295 -> 247
296 -> 205
297 -> 254
298 -> 35
299 -> 285
300 -> 19
301 -> 339
302 -> 211
303 -> 157
304 -> 68
305 -> 379
306 -> 175
307 -> 224
308 -> 214
309 -> 123
310 -> 107
311 -> 273
312 -> 342
313 -> 230
314 -> 188
315 -> 388
316 -> 202
317 -> 299
318 -> 59
319 -> 221
320 -> 125
321 -> 119
322 -> 266
323 -> 209
324 -> 217
325 -> 5
326 -> 346
327 -> 317
328 -> 25
329 -> 168
330 -> 77
331 -> 371
332 -> 323
333 -> 190
334 -> 318
335 -> 169
336 -> 178
337 -> 49,392
338 -> 243
339 -> 186
340 -> 124,322
341 -> 360
342 -> 341
343 -> 305
344 -> 78
345 -> 181
346 -> 290
347 -> 166
348 -> 156
349 -> 276
350 -> 275
351 -> 180
352 -> 351
353 -> 268
354 -> 315
355 -> 50
356 -> 353
357 -> 128
358 -> 26,319
359 -> 121
360 -> 297
361 -> 105
362 -> 74
363 -> 373
364 -> 147
365 -> 267
366 -> 310
367 -> 4
368 -> 89
369 -> 354
370 -> 144
371 -> 269
372 -> 171
373 -> 251
374 -> 366
375 -> 197
376 -> 120
377 -> 0
378 -> 398
379 -> 162
380 -> 332
381 -> 116
382 -> 18
383 -> 241
384 -> 397
385 -> 256
386 -> 334
387 -> 99
388 -> 240
389 -> 104
390 -> 307
391 -> 76
392 -> 17
393 -> 98
394 -> 368
395 -> 31
396 -> 328
397 -> 330
398 -> 64
399 -> 164'''
    inlines=x.split('\n')
    res=MaximalNonBranchingPathsPrint(MaximalNonBranchingPaths(graph2(inlines)))
    print(res)